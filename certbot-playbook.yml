---
#
# This playbook sets up a new project and utilises OpenShift NetworkPolicy,
# and isolates the project network from other prjects' networks. It also
# sets project admin role to given user.
#
#
# parameters (remember to put secrets into vault):
# * user
# * api_url
# * api_key
# * project_name
# * cb_email - your email to use to register to Let's Encrypt
# * cb_image - which container image and version to use
# * cb_route_label - which label is used for finding the routes to SSL
# * cb_extra_opts - any certbot extra options, like '--test'
# * cb_service_name - optionally customize name for certbot service
# * state present/absent
#
# e.g. K8S_AUTH_VERIFY_SSL=no ansible-playbook certbot-playbook.yml \
#        -i "localhost ansible_connection=local", \
#        -c local
#        -e api_url=https://api.ocp.fi -e user=kube-admin \
#        -e api_key=SMj1HWD9bJrEnvTR0JLR-EMGeeb_eDsaMnB-92-skno \
#        -e project_name=fevermap \
#        -e cb_extra_opts='--test' \
#        -e cb_email=you@example.com \
#        -e state=present

- name: Set SSL Certs using Let\'s encrypt
  hosts: all
  gather_facts: false
  vars:
    ansible_python_interpreter: /usr/bin/python3
    certbot_sa: certbot
    cb_image: quay.io/fevermap/certbot-ocp:latest
    cb_route_label: 'letsencrypt-me=true'
    cb_extra_opts: '--test'
  tasks:
    - name: Create certbot Service Account
      k8s:
        state: "{{ state }}"
        host: "{{ api_url }}"
        username: "{{ user }}"
        api_key: "{{ api_key }}"
        namespace: "{{ project_name }}"
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            labels:
              app: certbot-ocp
            name: "{{ certbot_sa }}"
            namespace: "{{ project_name }}"

    - name: Bind certbot SA to role able to modify routes
      k8s:
        state: "{{ state }}"
        host: "{{ api_url }}"
        username: "{{ user }}"
        api_key: "{{ api_key }}"
        namespace: "{{ project_name }}"
        definition:
          kind: RoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            labels:
              app: certbot-ocp
            name: "{{ certbot_sa }}"
          subjects:
            - kind: ServiceAccount
              name: "{{ certbot_sa }}"
              namespace: "{{ project_name }}"
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: admin

    - name: Create persistent volume for Let\'s Encrypt data
      k8s:
        state: "{{ state }}"
        host: "{{ api_url }}"
        username: "{{ user }}"
        api_key: "{{ api_key }}"
        namespace: "{{ project_name }}"
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            labels:
              app: certbot-ocp
            finalizers:
              - kubernetes.io/pvc-protection
            name: certbot-letsencrypt
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 20Mi
                
    - name: Create certbot service
      k8s:
        state: "{{ state }}"
        host: "{{ api_url }}"
        username: "{{ user }}"
        api_key: "{{ api_key }}"
        namespace: "{{ project_name }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              app: certbot-ocp
            name: certbot-ocp
          spec:
            ports:
              - name: 8080-tcp
                port: 8080
                protocol: TCP
                targetPort: 8080
            selector:
              name: certbot-ocp
            sessionAffinity: None
            type: ClusterIP

    - name: Create Pod for certbot
      k8s:
        state: "{{ state }}"
        host: "{{ api_url }}"
        username: "{{ user }}"
        api_key: "{{ api_key }}"
        namespace: "{{ project_name }}"
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            labels:
              app: certbot-ocp
              name: certbot-ocp
            name: certbot-ocp
          spec:
            containers:
              - env:
                  - name: ROUTE_LABEL
                    value: "{{ cb_route_label }}"
                  - name: EMAIL
                    value: "{{ cb_email }}"
                  - name: CERTBOT_EXTRA_OPTS
                    value: "{{ cb_extra_opts }}"
                image: "{{ cb_image }}"
                imagePullPolicy: IfNotPresent
                name: certbot-ocp
                ports:
                  - containerPort: 8080
                    protocol: TCP
                resources:
                  limits:
                    memory: 512Mi
                  requests:
                    memory: 256Mi
                volumeMounts:
                  - mountPath: /etc/letsencrypt
                    name: letsencrypt
            dnsPolicy: ClusterFirst
            restartPolicy: Never
            serviceAccount: "{{ certbot_sa }}"
            serviceAccountName: "{{ certbot_sa }}"
            terminationGracePeriodSeconds: 10
            volumes:
              - name: letsencrypt
                persistentVolumeClaim:
                  claimName: certbot-letsencrypt
    
    - name: Create cron job
      k8s:
        state: "{{ state }}"
        host: "{{ api_url }}"
        username: "{{ user }}"
        api_key: "{{ api_key }}"
        namespace: "{{ project_name }}"
        definition:
          apiVersion: batch/v1beta1
          kind: CronJob
          metadata:
            labels:
              app: certbot-ocp
            name: certbot-ocp
          spec:
            concurrencyPolicy: Forbid
            failedJobsHistoryLimit: 1
            jobTemplate:
              spec:
                template:
                  metadata:
                    labels:
                      parent: certbot-ocp
                      name: certbot-ocp
                      app: certbot-ocp
                  spec:
                    containers:
                      - env:
                          - name: ROUTE_LABEL
                            value: "{{ cb_route_label }}"
                          - name: EMAIL
                            value: "{{ cb_email }}"
                          - name: CERTBOT_EXTRA_OPTS
                            value: "{{ cb_extra_opts }}"
                        image: "{{ cb_image }}"
                        imagePullPolicy: IfNotPresent
                        name: certbot-ocp
                        ports:
                          - containerPort: 8080
                            protocol: TCP
                        resources:
                          limits:
                            memory: 512Mi
                          requests:
                            memory: 256Mi
                        volumeMounts:
                          - mountPath: /etc/letsencrypt
                            name: letsencrypt
                    dnsPolicy: ClusterFirst
                    restartPolicy: Never
                    serviceAccount: "{{ certbot_sa }}"
                    serviceAccountName: "{{ certbot_sa }}"
                    terminationGracePeriodSeconds: 10
                    volumes:
                      - name: letsencrypt
                        persistentVolumeClaim:
                          claimName: certbot-letsencrypt
            schedule: '0 23 * * *'
            successfulJobsHistoryLimit: 1
            suspend: false
